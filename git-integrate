#!/bin/sh

integration_file="$(git rev-parse --show-toplevel)/.integration_status"

colorize() {
    # prefer terminal safe colored and bold text when tput is supported
    if tput setaf 0 >/dev/null 2>&1; then
        ALL_OFF="$(tput sgr0)"
        BOLD="$(tput bold)"
        BLUE="$(tput setaf 4)"
        GREEN="$(tput setaf 2)"
        RED="$(tput setaf 1)"
        YELLOW="$(tput setaf 3)"
    else
        ALL_OFF="\e[0m"
        BOLD="\e[1m"
        BLUE="\e[34m"
        GREEN="\e[32m"
        RED="\e[31m"
        YELLOW="\e[33m"
    fi
    readonly ALL_OFF BOLD BLUE GREEN RED YELLOW
}

usage () {
    cat <<-EOH >&2
	usage: git intagrate init [-b <base>] <branch>
	    or git integrate add <branch> [-u <upstream>]
	    or git integrate status
	    or git integrate rewind
	EOH
}

exit_usage () {
    test ! -z "$1" && echo "$1" >&2
    usage
    exit "${2-1}"
}

exit_error () {
    echo "$1" >&2
    exit 1
}

is_ancestor () {
    if git merge-base --is-ancestor "$2" "$1"; then
        echo t
    else
        echo f
    fi
}

strip_remote() {
    for remote in $(git remote); do
        case $1 in $remote/*)
            echo "${1#$remote/}";
            return 0;;
        esac
    done
    return 1
}

branch_exists () {
    git rev-parse -q --verify "$1" >/dev/null
    return $?
}

ITERATE_BREAK=127
ITERATE_CONTINUE=126

iterate_branches () {
    func=$1

    test -z "$func" && exit_error "BUG: iterate_branches requires parameter"

    while IFS="|" read -r branch integration_status message;
    do
        $func "$branch" "$integration_status" "$message"
        case $? in
            $ITERATE_BREAK) break ;;
            $ITERATE_CONTINUE) continue ;;
        esac
    done <"$integration_file"
}

branch_status () {
    branch="$1"

    branch_up_to_date=$(is_ancestor "$branch" "$branch@{u}")
    branch_merged=$(is_ancestor "$integration_branch" "$branch")
    branch_on_base=$(is_ancestor "$branch" "$base_branch")
}

cmd_init () {
    base=
    opts=$(getopt -q "b:" "$@") || exit_usage "error: unknown option or missing argument"
    eval set -- "$opts"

    while true; do
        case $1 in
            -b) base=$2; shift ;;
            --) shift; break ;;
        esac
        shift
    done

    if test $# -lt 1; then
        exit_error "error: required argument <branch> missing"
    fi

    branch=$1

    git config integration.branch "$branch"

    if test -n "$base"; then
        git config integration.base "$base"
    fi

    git branch "$branch" "$base"

    touch "$integration_file" || exit_error "fatal: could not create '$integration_file'"
}

cmd_add () {
    upstream=

    opts=$(getopt -q "u:" "$@") || exit_usage "error: unknown option or missing argument"
    eval set -- "$opts"

    while true; do
        case $1 in
            -u) upstream=$2; shift ;;
            --) shift; break ;;
        esac
        shift
    done

    branch=$1

    if test -z "$branch"; then
        if test -z "$upstream"; then
            exit_error "error: branch '$branch' does not exist and no upstream given"
        fi

        branch=$(strip_remote "$upstream") \
            || exit_error "error: unable to derive branch name from upstream"

    fi

    if ! branch_exists "$branch"; then
        if test -z "$upstream" || ! branch_exists "$upstream"; then
            exit_error "error: required to create branch and no valid upstream given: $upstream"
        fi

        git branch "$branch" "$upstream" || exit_error "fatal: could not create branch: $branch"
    fi

    echo "$branch|new|" >>"$integration_file"

    echo "Added '$branch' to be integrated"
}

iterate_branches_status () {
    branch="$1"
    integration_status="$2"
    message="$3"

    color=
    output=
    status=

    branch_exists "$branch" || exit_error "branch '$branch' does not exist"
    branch_status "$branch"

    case "$branch_on_base,$branch_merged,$branch_up_to_date,$integration_status" in
        *,*,f,*)
            color=${YELLOW}
            status="out of date"
            ;;
        f,*,*,*)
            color=${YELLOW}
            status="not based on $base_branch"
            ;;
        *,t,*,*)
            color=${BLUE}
            status="merged"
            ;;
        *,*,*,new)
            status="new"
            color=${GREEN}
            ;;
        *,*,*,conflict)
            status="conflict"
            color=${RED}
            ;;
        *)
            status=unknown
            color=
            ;;
    esac

    printf "${color}%s${ALL_OFF} [%s] %s\n" "$branch" "$status" "$message"
}

cmd_status () {
    if test -f "$integration_file"; then
        output=$(iterate_branches "iterate_branches_status")
    fi

    if test -n "$output"; then
        echo "$output"
    else
        echo "No branches to integrate"
    fi
}

cmd_merge () {
    while IFS="|" read -r branch integration_status message;
    do
        :
    done

cmd_rewind () {
    git checkout -B "$integration_branch" "$base_branch"
}

if [ $# -lt 1 ]; then
    usage
    exit;
fi

colorize

setup () {
    integration_branch=$(git config --get integration.branch) || {
        echo "fatal: configuration value integration.branch not set"
        exit 1
    }

    branch_exists "$integration_branch" \
        || exit_error "error: integration branch '$integration_branch' does not exist"


    base_branch=$(git config --get integration.base) || {
        echo "fatal: configuration value integration.base not set"
        exit 1
    }

    branch_exists "$base_branch" \
        || exit_error "error: base branch '$base_branch' does not exist"

}

command=$1; shift;

test "$command" != "init" && setup

case $command in
    add)
        cmd_add "$@"
        ;;
    status)
        cmd_status "$@"
        ;;
    init)
        cmd_init "$@"
        ;;
    rewind)
        cmd_rewind "$@"
        ;;
    *)
        usage
        ;;
esac
